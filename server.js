 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

app.route('/:time')
    .get(function(req,res,next){
      var natural;
      var unix;
      if(req.params.time.indexOf(",")>0){
        natural = req.params.time;
        if( new Date(req.params.time).getTime()/1000){
          unix = ""+(new Date(req.params.time).getTime()/1000);
          natural = req.params.time;
        }else{
          unix = null;      
          natural = null;
        }
    }else{
      if(req.params.time * 1){
        var date = new Date(req.params.time*1000);
        let months = ['January','February','March','April','May','June','July','August','September','October','November','December'];
        natural = months[date.getMonth()]+' '+date.getDate()+' '+date.getFullYear();
        unix = req.params.time * 1;
      }else{
        natural = null;
        unix = null;
      }
    }
      res.send({
        unix: unix,
        natural: natural
      });
    })
// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

